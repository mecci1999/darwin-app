services:
  # Zookeeper Service
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      ZOO_ENABLE_AUTH: "no"
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app_network

  # Kafka Service
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:9092"
    expose:
      - "${KAFKA_INTERNAL_PORT}"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:${KAFKA_INTERNAL_PORT},OUTSIDE://localhost:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:SASL_PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:${KAFKA_INTERNAL_PORT},OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_MESSAGE_MAX_BYTES: "5242880" # Set message size to 5MB
      # SASL认证配置
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_CLIENT_USERS: ${KAFKA_USER}
      KAFKA_CLIENT_PASSWORDS: ${KAFKA_PASSWORD}
      KAFKA_INTER_BROKER_USER: ${KAFKA_USER}
      KAFKA_INTER_BROKER_PASSWORD: ${KAFKA_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - app_network

  # MySQL Service
  mysql:
    image: mysql:latest
    container_name: mysql
    # restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./mysql_data:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - app_network

  # Redis Service
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app_network

  # InfluxDB Service
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "${INFLUXDB_PORT}:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    volumes:
      - ./influxdb_data:/var/lib/influxdb2
      - ./influxdb_config:/etc/influxdb2
    networks:
      - app_network
    restart: unless-stopped

  # prometheus:
  #   image: bitnami/prometheus:latest
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   restart: always
  #   environment:
  #     - HOST_DOCKER_INTERNAL=host.docker.internal
  #   networks:
  #     - app_network

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   restart: always
  #   environment:
  #     - HOST_DOCKER_INTERNAL=host.docker.internal
  #   networks:
  #     - app_network

  # Node.js Service
  # nodejs-service:
  #   # build:
  #   #  context: .
  #   #  dockerfile: Dockerfile  # Ensure this path is correct
  #   image: fengyuserver_v1:20241223
  #   container_name: nodejs_service
  #   ports:
  #     - "6666:6666" # Adjust port as needed for your Node.js app
  #   environment:
  #     - NODE_ENV=production
  #   # depends_on:
  #   #   - kafka
  #   #   - mysql
  #   networks:
  #     - app_network
  #   restart: always

networks:
  app_network:
    driver: bridge # Ensure all services are on the same network
